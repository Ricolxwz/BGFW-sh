---

services:

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      # - '81:81'
    volumes:
      - ./app/nginx/data:/data
      - ./app/nginx/letsencrypt:/etc/letsencrypt
    networks:
      - app

  alist: # 5244
    image: 'xhofe/alist:latest'
    restart: unless-stopped
    volumes:
      - ./app/alist:/opt/alist/data
    environment:
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=UTC
    networks:
      - app

  chatgpt-next-web: # 3000
    image: yidadaa/chatgpt-next-web
    environment:
      - OPENAI_API_KEY=$OPENAI_API_KEY
      - GOOGLE_API_KEY=$GOOGLE_API_KEY
      - ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY
      - CODE=$CODE
    restart: unless-stopped
    networks:
      - app

  umami: # 3000
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      DATABASE_URL: postgresql://umami:${POSTGRES_PASSWORD}@umami-db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: replace-me-with-a-random-string
    depends_on:
      umami-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app
  umami-db: # 5432
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./app/umami-db:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app
      
  uptime-kuma: # 3001
    image: louislam/uptime-kuma:1
    volumes:
      - ./app/uptime-kuma:/app/data
    restart: unless-stopped
    networks:
      - app
      
  memos: # 5230
    image: neosmemo/memos:stable
    volumes:
      - ./app/memos:/var/opt/memos
    restart: unless-stopped
    networks:
      - app

  yourls-db:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=yourls
      - MYSQL_USER=yourls
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
    volumes:
      - ./app/yourls-db/db:/var/lib/mysql
      - ./app/yourls-db/conf:/etc/mysql/conf.d
    restart: unless-stopped
    networks:
      - app
  yourls: # 80
    image: yourls
    restart: unless-stopped
    environment:
      YOURLS_DB_HOST: yourls-db
      YOURLS_DB_USER: yourls
      YOURLS_DB_PASS: $MYSQL_PASSWORD
      YOURLS_DB_NAME: yourls
      YOURLS_USER: $YOURLS_USER
      YOURLS_PASS: $YOURLS_PASS
      YOURLS_SITE: $YOURLS_SITE
      YOURLS_HOURS_OFFSET: 8
    volumes:
      - ./app/yourls/:/var/www/html   
    networks:
      - app
      
  nav: # 80
    image: nginx
    restart: unless-stopped
    volumes:
      - ./app/nav:/usr/share/nginx/html:ro
    networks:
      - app

  # coder: # 7080
  #   image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
  #   restart: unless-stopped
  #   networks:
  #     - app
  #   environment:
  #     CODER_PG_CONNECTION_URL: "postgresql://${POSTGRES_USER_CODER}:${POSTGRES_PASSWORD_CODER}@coder-db/${POSTGRES_DB_CODER}?sslmode=disable"
  #     CODER_HTTP_ADDRESS: "0.0.0.0:7080"
  #     CODER_ACCESS_URL: "${CODER_ACCESS_URL}"
  #   depends_on:
  #     coder-db:
  #       condition: service_healthy
  # coder-db: # 5432
  #   image: "postgres:16"
  #   restart: unless-stopped
  #   networks:
  #     - app
  #   environment:
  #     POSTGRES_USER: $POSTGRES_USER_CODER
  #     POSTGRES_PASSWORD: $POSTGRES_PASSWORD_CODER
  #     POSTGRES_DB: $POSTGRES_DB_CODER
  #   volumes:
  #     - ./app/coder:/var/lib/postgresql/data
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}",
  #       ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  
networks:
  app:
    driver: bridge
